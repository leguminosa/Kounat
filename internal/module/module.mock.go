// Code generated by MockGen. DO NOT EDIT.
// Source: internal/module/module.go

// Package module is a generated GoMock package.
package module

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/leguminosa/kounat/internal/entity"
)

// MockCharacterModule is a mock of CharacterModule interface.
type MockCharacterModule struct {
	ctrl     *gomock.Controller
	recorder *MockCharacterModuleMockRecorder
}

// MockCharacterModuleMockRecorder is the mock recorder for MockCharacterModule.
type MockCharacterModuleMockRecorder struct {
	mock *MockCharacterModule
}

// NewMockCharacterModule creates a new mock instance.
func NewMockCharacterModule(ctrl *gomock.Controller) *MockCharacterModule {
	mock := &MockCharacterModule{ctrl: ctrl}
	mock.recorder = &MockCharacterModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharacterModule) EXPECT() *MockCharacterModuleMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockCharacterModule) GetByID(ctx context.Context, id int) (*entity.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCharacterModuleMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCharacterModule)(nil).GetByID), ctx, id)
}
